---
import sanitizeHtml from 'sanitize-html';
import '../styles/index.css';

export interface Props {
	title: string;
	animation?: 'page' | 'element' | string;
	align?: 'center' | 'left' | string;
	renderBlocking?: string | string[];
}

const { title, animation = 'element', align = 'center', renderBlocking } = Astro.props;
const safeTitle = sanitizeHtml(title, {
	allowedTags: [],
});
---

<!DOCTYPE html>
<html lang="en" data-view-transition={animation} data-align={align}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<title>{safeTitle}</title>
		{typeof renderBlocking === "string"
			? <link rel="expect" blocking="render" href={`#${renderBlocking}`}>
			: Array.isArray(renderBlocking)
				? renderBlocking.map((renderBlockingItem) => <link rel="expect" blocking="render" href={`#${renderBlockingItem}`}>)
				: null}
		<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%2210 0 100 100%22><text y=%22.90em%22 font-size=%2290%22>üéûÔ∏è</text></svg>">
		<script type="module" define:vars={{animation}}>
			window.addEventListener("pagereveal", async (event) => {
				if (event.viewTransition) {
					if (animation === "none") {
						event.viewTransition.skipTransition();
					}
				}
			});
		</script>
		<script type="module">
			const extractSlideNumberFromPath = (pathname) => /\d{1,3}(\.\d)*/.exec(pathname)?.at(0);

			const determineTransitionType = (fromNavigationEntry, toNavigationEntry) => {
				const fromSlideNumber = extractSlideNumberFromPath(new URL(fromNavigationEntry.url).pathname);
				const toSlideNumber = extractSlideNumberFromPath(new URL(toNavigationEntry.url).pathname);

				if (fromSlideNumber > toSlideNumber) return 'backwards';
				if (fromSlideNumber < toSlideNumber) return 'forwards';

				return 'unknown';
			}

			window.addEventListener('pagereveal', async (event) => {
				if (event.viewTransition) {
					const transitionType = determineTransitionType(navigation.activation.from, navigation.activation.entry);
					event.viewTransition.types.add(transitionType);
				}
			});
		</script>
		<script type="module">
			function cloneAttributes(target, source) {
				[...source.attributes].forEach( attr => { target.setAttribute(attr.name ,attr.value) })
			}
			const removeSpans = document.querySelectorAll("span.diff.remove");
			const addSpans = document.querySelectorAll("span.diff.add");
			for (const removeSpan of removeSpans) {
				const removeDel = document.createElement("del");
				cloneAttributes(removeDel, removeSpan);
				removeDel.innerHTML = removeSpan.innerHTML;
				removeSpan.replaceWith(removeDel);
			}
			for (const addSpan of addSpans) {
				const addIns = document.createElement("ins");
				cloneAttributes(addIns, addSpan);
				addIns.innerHTML = addSpan.innerHTML;
				addSpan.replaceWith(addIns);
			}
		</script>
	</head>
	<body>
		<slot />
	</body>
</html>