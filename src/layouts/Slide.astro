---
import Layout from '../layouts/Base.astro';
import Controls from '../components/Controls.astro';
import { getCollection } from 'astro:content';

export interface Props {
	title: string;
	animation?: 'page' | 'element' | 'none' | string;
	noJustifyItems?: boolean;
	renderBlocking?: string | string[];
}

const { title, animation, noJustifyItems, renderBlocking } = Astro.props;

const slides = await getCollection('slides');
const currentSlideIndex = slides.findIndex(
	(slide) => `/slides/${slide.slug}/` === Astro.url.pathname
);
const prevSlide =
	currentSlideIndex <= 0 ? null : slides.at(currentSlideIndex - 1);
const nextSlide =
	currentSlideIndex >= slides.length - 1 ? null : slides.at(currentSlideIndex + 1);

const AstroURL = Astro?.url?.href;
---

<Layout title={title} animation={animation} renderBlocking={renderBlocking}>
	<main style={noJustifyItems && "justify-items: unset;"}>
		<slot />
	</main>
	<footer>
		<Controls
			prevHref={prevSlide ? `/slides/${prevSlide.slug}/` : null}
			nextHref={nextSlide ? `/slides/${nextSlide.slug}/` : null}
		/>
	</footer>
</Layout>

<script is:inline define:vars={{ slides, AstroURL }}>
	if (window.self === window.top) {
		const bc = new BroadcastChannel('slides');
		bc.postMessage({ location: location.href });
		bc.addEventListener('message', (event) => {
			if (event.data?.location !== AstroURL) {
				location = event.data.location;
			}
			if (event.data?.slide !== undefined) {
				location = `/slides/${slides[event.data.slide].slug}/`;
			}
		});
	}

	if (new URLSearchParams(location.search).has("no-controls")) {
		document.querySelector("footer").setAttribute("hidden", "");
	}
</script>

<style is:global>
	@layer base {
		body {
			display: grid;

			> * {
				@media (width >= 50em) {
					grid-area: 1 / 1;
				}
			}
		}
		
		
		main {
			display: grid;
			gap: var(--size-8);
			padding: var(--size-8);
			max-inline-size: 100svi;
			grid-template-columns: calc(100svi - (var(--size-8) * 2 ));
			container-type: inline-size;
			align-content: center;

			@media (width < 50em) {
				gap: var(--size-5);
				padding: var(--size-3);
				grid-template-columns: calc(100svi - (var(--size-3) * 2 ));
			}
		}
		
		footer {
			place-self: end;
			isolation: isolate; /* because safari ðŸ™ƒ */
		}
	}
</style>
