---
import Layout from '../layouts/Base.astro';
import Controls from '../components/Controls.astro';
import { getCollection } from 'astro:content';

export interface Props {
	title: string;
	animation?: 'page' | 'element' | string;
}

const { title, animation } = Astro.props;

const slides = await getCollection('slides');
const currentSlideIndex = slides.findIndex(
	(slide) => `/slides/${slide.slug}/` === Astro.url.pathname
);
const prevSlide =
	currentSlideIndex <= 0 ? null : slides.at(currentSlideIndex - 1);
const nextSlide =
	currentSlideIndex >= slides.length ? null : slides.at(currentSlideIndex + 1);
---

<Layout title={title} animation={animation}>
	<main>
		<slot />
	</main>
	<footer>
		<Controls
		prevHref={prevSlide ? `/slides/${prevSlide.slug}/` : null}
		nextHref={nextSlide ? `/slides/${nextSlide.slug}/` : null}
		/>
	</footer>
</Layout>

<script is:inline define:vars={{ slides }}>
	const bc = new BroadcastChannel('slides');
	bc.postMessage({ location: location.href });
	bc.addEventListener('message', (event) => {
		if (event.data.location && event.data.location !== Astro.url.href) {
			location = event.data.location;
		}
		if (event.data.slide) {
			location = `/slides/${slides[event.data.slide - 1].slug}/`;
		}
	});
</script>

<style is:global>
	@layer base {
		body {
			display: grid;
		}
		
		body > * {
			grid-area: 1 / 1;
		}
		
		main {
			display: grid;
			place-content: center;
			text-align: center;
			gap: var(--size-8);
			padding: var(--size-8);
			max-inline-size: 100svi;
			grid-template-columns: calc(100svi - (var(--size-8) * 2 ));
			container-type: inline-size;

			
			@media (width < 50em) {
				gap: var(--size-5);
				padding: var(--size-3);
				grid-template-columns: calc(100svi - (var(--size-3) * 2 ));
			}
		}
		
		footer {
			place-self: end;
		}
	}
</style>
