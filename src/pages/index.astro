---
import markdownit from 'markdown-it';
import Layout from '../layouts/Base.astro';
import { getCollection } from 'astro:content';

const md = markdownit({ html: true, breaks: true });

const title = 'View transitions in the real world';

const slides = await getCollection('slides');

const renderedSlides = await Promise.all(
	slides.map(async (slide) => {
		const { Content } = await slide.render();

		let title;
		if (slide.data.multilineTitle) {
			title = md.render(slide.data.title);
		} else {
			title = md.renderInline(slide.data.title);
		}

		let notes;
		if (slide.data.notes) {
			notes = md.render(slide.data.notes);
		}

		const slideNumber = /\d(\.\d)*/.exec(slide.slug)?.at(0);

		return {
			Content,
			title,
			notes,
			slug: slide.slug,
			slideNumber,
		};
	})
);
---

<Layout title={title}>
	<main>
		<header>
			<h1>
				<span class="h1">{title}</span>
				<span class="h3">by <a href="https://ellyloel.com/">Elly Loel</a></span>
			</h1>
		</header>

		<h2>Presenter view</h2>

		<form>
			<fieldset>
				<legend>Slide controls</legend>
				<div>
					<button type="button" id="first-slide-button">
						<span class="visually-hidden">First slide</span>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
							<!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
							<path
								d="M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160zm352-160l-160 160c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L301.3 256 438.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0z"
							>
							</path>
						</svg>
					</button>
					<button type="button" id="previous-slide-button">
						<span class="visually-hidden">Previous slide</span>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
							<!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
							<path
								d="M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"
							>
							</path>
						</svg>
					</button>
					<div id="slide-indicator">1</div>
					<button type="button" id="next-slide-button">
						<span class="visually-hidden">Next slide</span>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
							<!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
							<path
								d="M278.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-160 160c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L210.7 256 73.4 118.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l160 160z"
							>
							</path>
						</svg>
					</button>
					<button type="button" id="last-slide-button">
						<span class="visually-hidden">Last slide</span>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
							<!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
							<path
								d="M470.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 256 265.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160zm-352 160l160-160c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L210.7 256 73.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z"
							>
							</path>
						</svg>
					</button>
				</div>
			</fieldset>
		</form>

		<ol class="slides">
			{renderedSlides.map(({ Content, title, notes, slug, slideNumber }, index) => (
				<li>
					<section id={`slide-${slideNumber}`} class="slide">
						<h3 class="h4">
							<a href={`/slides/${slug}/`}>
								<span class="visually-hidden">Slide</span>
								{slideNumber}
							</a>
						</h3>
						<div class="slide-content-and-notes">
							<div class="slide-content">
								<h4 class="h2" set:html={title} />
								<Content />
							</div>
							<div class="slide-notes" set:html={notes} />
						</div>
					</section>
				</li>
			))}
		</ol>
	</main>
</Layout>

<script is:inline define:vars={{ slides }}>
	const firstSlideButton = document.getElementById('first-slide-button');
	const previousSlideButton = document.getElementById('previous-slide-button');
	const slideIndicator = document.getElementById('slide-indicator');
	const nextSlideButton = document.getElementById('next-slide-button');
	const lastSlideButton = document.getElementById('last-slide-button');

	const bc = new BroadcastChannel('slides');
	let currentSlideIndex = 1;

	bc.postMessage({ slide: currentSlideIndex });
	bc.addEventListener('message', (event) => {
		if (!event.data.location) return;
		const url = new URL(event.data.location);
		for (const slide of slides) {
			if (slide.url !== url.pathname) return;
			currentSlideIndex = slides.indexOf(slide) + 1;
		}
	});

	firstSlideButton.addEventListener('click', (event) => {
		changeSlide(1);
	});

	previousSlideButton.addEventListener('click', (event) => {
		if (currentSlideIndex <= 1) return;
		changeSlide(currentSlideIndex - 1);
	});

	nextSlideButton.addEventListener('click', (event) => {
		if (currentSlideIndex >= slides.length) return;
		changeSlide(currentSlideIndex + 1);
	});

	lastSlideButton.addEventListener('click', (event) => {
		changeSlide(slides.length);
	});

	window.addEventListener('keydown', (event) => {
		if (event.key === 'Home') {
			changeSlide(1);
		}
		if (event.key === 'ArrowLeft' || event.key === 'PageUp') {
			if (currentSlideIndex <= 1) return;
			changeSlide(currentSlideIndex - 1);
		}
		if (event.key === 'ArrowRight' || event.key === 'PageDown') {
			if (currentSlideIndex >= slides.length) return;
			changeSlide(currentSlideIndex + 1);
		}
		if (event.key === 'End') {
			changeSlide(slides.length);
		}
	});

	const changeSlide = (newSlideIndex) => {
		if (newSlideIndex < 1 || newSlideIndex > slides.length) return;
		currentSlideIndex = newSlideIndex;
		const currentSlideNumber = /\d(\.\d)*/.exec(slides[currentSlideIndex - 1].slug)?.at(0);
		slideIndicator.textContent = currentSlideNumber;
		navigation.navigate(`#slide-${currentSlideNumber}`);
		bc.postMessage({ slide: currentSlideIndex });
	};
</script>

<style>
	@layer base {
		main {
			display: grid;
			gap: var(--size-3);
			padding: 1rem;
			grid-template-areas:
				"header header"
				"h2 controls"
				"slides slides";

			> header {
				grid-area: header;
				margin-block-end: var(--size-7);

				> h1 > span {
					display: block;
				}
			}

			> h2 {
				grid-area: h2;
			}

			> .slides {
				grid-area: slides;
				inline-size: 100%;
				display: grid;
				gap: 1rem;
				list-style: none;
				padding: 0;

				> li {
					padding: 0;
					max-inline-size: none;
					font-size: inherit;
				}
			}
		}

		.slide {
			& .slide-content-and-notes {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				gap: var(--size-3);
			}

			& .slide-content {
				display: grid;
				place-content: center;
				text-align: center;
				gap: var(--size-3);
				box-shadow: var(--shadow-4);
				border: var(--border-size-1) solid var(--surface-2);
				border-radius: var(--radius-conditional-2);
				padding-inline: var(--size-4);
				padding-block: var(--size-3);
				aspect-ratio: var(--ratio-widescreen);
				zoom: 50%;
			}

			& .slide-notes {
				font-size: var(--font-size-4);
			}
		}

		form {
			grid-area: controls;
			position: sticky;
			inset: var(--size-3) var(--size-3) auto auto;
			background-color: var(--surface-1);
			border-radius: var(--radius-2);
			box-shadow: var(--shadow-4);
			border: var(--border-size-1) solid var(--surface-2);
			justify-self: end;
			padding-block: var(--size-2);
			padding-inline: var(--size-2);

			> fieldset {
				border: none;
				padding: 0;

				> legend {
					padding: 0;
					font-weight: var(--font-weight-7);
					line-height: var(--font-lineheight-1);
					margin-block-end: var(--size-1);
				}

				> div {
					display: flex;
					place-items: center;
					gap: var(--size-1);

					> div {
						font-variant-numeric: tabular-nums;
						font-weight: var(--font-weight-7);
						padding-inline: var(--size-1);
					}

					> button {
						padding: var(--size-1);
						background: none;

						> svg {
							fill: currentColor;
							block-size: var(--size-3);
							inline-size: var(--size-3);
							aspect-ratio: var(--ratio-square);
						}
					}

				}
			}
		}
	}
</style>